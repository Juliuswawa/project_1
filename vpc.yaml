AWATemplateFormatVersion: 2010-09-09
Description: >-
  #This templates will deploy a VPC in either us-east-1 or us-west-2, with a pair of public and private subnets spread
  #accross two availability zones. it will also deploy an ternet gateway with a default
  #route on public subnets and a linux t2.micro along with a Security Group with open HTTP access.  
Mappings:
  RegionMap:
    us-east-1:
    "AMI": "ami-052efd3df9dad4825"
    us-west-2:
    "AMI": "ami-0d70546e43a941d70"
Resources:
  VPC:
     Type: 'AWS::EC2::VPC'
     Properties:
       CidrBlock: 10.0.0.0/16
       EnableDnsHostnames: 'true'
       EnableDnsSupport: 'true'
       Tags: 
        - Key: Name
          value: Test VPC
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: Test IGW

  InternetGatewayAttachment:
  Type: 'AWS::EC2::VPCGatewayAttachment'
  Properties: 
    InternetGatewayId: !Ref InternetGateway
    VpcId: !Ref VPC

  PublicSubnet1:
  Type: AWS::EC2::Subnet
  Properties: 
    VpcId: !Ref VPC
    AvailabilityZone: !Select [ 0, !GetAZs '' ]
    CidrBlock: 10.0.1.0/24
    MapPublicIpOnLaunch: true
    Tags: 
      - Key: Name
        Value: Vpc Public Subnet (AZ1)    

  PublicSubnet2:
  Type: AWS::EC2::Subnet
  Properties: 
    VpcId: !Ref VPC
    AvailabilityZone: !Select [ 0, !GetAZs '' ]
    CidrBlock: 10.0.2.0/24
    MapPublicIpOnLaunch: true
    Tags: 
      - Key: Name
        Value: Vpc Public Subnet (AZ2)   

  PrivateSubnet1:
  Type: AWS::EC2::Subnet
  Properties: 
    VpcId: !Ref VPC
    AvailabilityZone: !Select [ 0, !GetAZs '' ]
    CidrBlock: 10.0.11.0/24
    MapPublicIpOnLaunch: false
    Tags: 
      - Key: Name
        Value: Vpc Private Subnet (AZ1)
    
  PrivateSubnet2:
  Type: AWS::EC2::Subnet
  Properties: 
    VpcId: !Ref VPC
    AvailabilityZone: !Select [ 1, !GetAZs '' ]
    CidrBlock: 10.0.12.0/24
    MapPublicIpOnLaunch: false
    Tags: 
      - Key: Name
        Value: Vpc Private Subnet (AZ2)
  
  PublicRouteTable:
  Type: AWS::EC2::RouteTable
  Properties: 
    VpcId: !Ref VPC
    Tags: 
      - Key: Vpc Public Route
        Value: Vpc Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Dependson: InternateGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
 
  WebserverSecurityGroup:
  Type: 'AWS::EC2::SecurityGroup'
  Properties:
    GroupDescription: Enable HTTP from 0.0.0.0/0
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
    VpcId: !Ref VPC
        
  EC2Instance:
     Type: AWS::EC2::Instance
     Properties:
       ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
       InstanceType: t2.micro
       SubnetId: !Ref PublicSubnet1
       SecurityGroupIds:
           !Ref WebServerSecurityGroup
       Tags:
          Keys: Name
          Value: Vpc Ec2
       UserData:
         Fn::Base64: !Sub |
             #!/bin/bash
             sudo apt update -y
             sudo httpd start 
             echo "<html><body><ch1>Pernell whittaker is one of my favorite boxers. This message is provided to you by Region ${AWS::Region}<h1></html>" >/var/ww/html/index.html
  Outputs:
     PublicIp:
       Description: EC2 Instance Public Ip
       Value: !GetAtt EC2Instance.PublicIp
    


          
        